function [p] = cvar_two_sided_perm(R1, R2, aparams, dparams)

[nfrq, npoints, nspectra1] = size(R1);
[nfrq, npoints, nspectra2] = size(R2);

nspectra = min([nspectra1 nspectra2]);
blsamples = time_to_samples(dparams.ana.baseline, dparams.data.srate);

cond{1} = R1(:,:,1:nspectra);
cond{2} = R2(:,:,1:nspectra);
p = zeros(nfrq, npoints);

if (aparams.ana.normtobl)
    z0 = norm_to_bl(abs(sum(R1, 3)),blsamples) - norm_to_bl(abs(sum(R2, 3)), blsamples);
else
    z0 = abs(sum(R1, 3)) - abs(sum(R2,3));
end


for i=1:aparams.ana.nsurr
    if ( mod(i,100) == 0)
        display(sprintf('Permutation %d of %d', i, aparams.ana.nsurr));
    end
    [rl] = flip(nspectra);
    for j=1:nspectra
        if (rl.flip(j))
            temp = cond{2}(:,:,j);
            cond{2}(:,:,j) = cond{1}(:,:,j);
            cond{1}(:,:,j) = temp;
        end
    end
    
    if (aparams.ana.normtobl)
        z = norm_to_bl(abs(sum(cond{1}, 3)), blsamples) - norm_to_bl(abs(sum(cond{2},3)), dparams.data.srate);
    else
        z = abs(sum(cond{1}, 3)) - abs(sum(cond{2},3));
    end

    ind = find(z > z0);
    p(ind) = p(ind) + 1;
end

p = (1+p)./(aparams.ana.nsurr+1);


function [z] = permute(spectra, norm, blsamples)

[~,~,nspectra] = size(spectra);

for i=1:nspectra
    index = floor(rand*nspectra) + 1;
    if (index > nspectra)
        index = nspectra;
    end
    temp = spectra(:,:,i);
    spectra(:,:,i) = spectra(:,:,index);
    spectra(:,:,index) = temp;
end

c1 = mean(spectra(:,:,1:nspectra), 3);
c2 = mean(spectra(:,:,nspectra+1:nspectra), 3);

if (norm)
    
    z = norm_to_bl(c1, blsamples)- norm_to_bl(c2, blsamples);
else
    z = c1 - c2;
end


